#include <TimeLib.h>
#include <Ethernet.h>
#include <EthernetUdp.h>

// NTP Servers:
static const char ntpServerName[] = "pool.ntp.org";

EthernetUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

time_t getNtpTime();
void digitalClockDisplay();
void printDigits(int digits);
void sendNTPpacket(IPAddress &address);

void setup() {
  // Initialize Ethernet and Serial communication
  Ethernet.begin(mac);
  Serial.begin(9600);

  // Set the time zone to UTC (GMT)
  setTime(0);
}

void loop() {
  // Fetch the current time from the NTP server
  time_t now = getNtpTime();

  // Check if the time is out of sync by 5 seconds
  if (abs(now - RTC.get()) > 5) {
    // Update the RTC clock with the current time
    RTC.set(now);
  }

  // Display the current time
  digitalClockDisplay();

  // Wait for 5 seconds before fetching the time again
  delay(5000);
}

void digitalClockDisplay() {
  // Get the current time from the RTC
  time_t now = RTC.get();

  // Format and print the time
  Serial.print(hour(now), DEC);
  printDigits(minute(now));
  printDigits(second(now));
  Serial.print(" ");
  Serial.print(day(now), DEC);
  Serial.print("/");
  Serial.print(month(now), DEC);
  Serial.print("/");
  Serial.println(year(now), DEC);
}

void printDigits(int digits) {
  // Print a leading zero for single-digit numbers
  if (digits < 10) {
    Serial.print('0');
  }
  Serial.print(digits);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  IPAddress ntpServerIP; // NTP server's ip address

  // Get the IP address of the NTP server
  Ethernet.hostByName(ntpServerName, ntpServerIP);

  // Send an NTP request to the NTP server
  sendNTPpacket(ntpServerIP);

  // Wait for the response
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      // Read the packet into the buffer
      Udp.read(packetBuffer, NTP_PACKET_SIZE);

      // Extract the seconds since 1900 from the packet
      unsigned long secsSince1900;
      secsSince1900 = (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];

      // Convert the seconds since 1900 to the current time
      return secsSince1900 - 2208988800UL; // Subtract 70 years to get 1970
    }
  }

  // Return 0 if unable to get the time from the NTP server
  return 0;
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address) {
  // Set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);

  // Initialize values needed to form the NTP request
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  // 8 bytes of zero for Reference ID
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;

  // Send the NTP request
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
